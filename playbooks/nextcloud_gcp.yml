---
- name: nextcloud - google cloud variant
  hosts: localhost
  gather_facts: true
  become: true
  tasks:

    - name: required packages
      apt:
        pkg:
          - docker.io
          - libcap2-bin
          - python3-pip
          - ssl-cert
        state: latest
        update_cache: yes

    - name: docker python packages
      pip:
        name:
          - docker
        executable: /usr/bin/pip3
        state: latest

    - name: IP Forwarding enable/persist
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.conf

    - name: docker service started/enabled
      systemd:
        name: docker
        state: started
        enabled: True

    - name: db user
      user:
        name: nextclouddb
        shell: /bin/bash
        create_home: False
      register: db_user

    - name: storagegw user
      user:
        name: storagegw
        shell: /bin/bash
        create_home: False
      register: storagegw_user

    - name: various container directories - application
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_application"
        - "{{ project_directory }}/nextcloud_application/var"
        - "{{ project_directory }}/nextcloud_application/var/www"
        - "{{ project_directory }}/nextcloud_application/var/www/html"
        - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps"
        - "{{ project_directory }}/nextcloud_application/var/www/html/config"
        - "{{ project_directory }}/nextcloud_application/var/www/html/data"

    - name: various container directories - webproxy
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_webproxy"

    - name: various container directories - storagegw
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ storagegw_user.name }}"
        group: "{{ storagegw_user.group }}"
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_storagegw"

    - name: various container directories - db
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ db_user.name }}"
        group: "{{ db_user.group }}"
        mode: '0750'
      with_items:
        - "{{ project_directory }}/nextcloud_database"

    - name: web_port if not defined
      set_fact:
        web_port: "{% if web_port is not defined %}443{% else %}{{ web_port }}{% endif %}"

    - name: secure proxy confs
      template:
        src: "{{ item }}"
        dest: "/{{ project_directory }}/nextcloud_webproxy/{{ item }}"
        owner: root
        group: root
        mode: 0444
      with_items:
        - httpd-ssl.conf
        - httpd.conf

    - name: Retrieve GCS Token
      uri:
        url: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
        method: GET
        headers:
          Metadata-Flavor: Google
        return_content: yes
      register: gcs_token_resp

    - name: Get admin secret from google secret manager
      uri:
        url: https://secretmanager.googleapis.com/v1/projects/{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}/secrets/{{ gcp_project_prefix }}-admin-password/versions/latest:access
        method: GET
        remote_src: yes
        return_content: yes
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
          Content-Type: application/json
          x-goog-user-project: "{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}"
      register: admin_secret

    - name: Get db secret from google secret manager
      uri:
        url: https://secretmanager.googleapis.com/v1/projects/{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}/secrets/{{ gcp_project_prefix }}-db-password/versions/latest:access
        method: GET
        remote_src: yes
        return_content: yes
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
          Content-Type: application/json
          x-goog-user-project: "{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}"
      register: db_secret

    - name: Get storage secret from google secret manager
      uri:
        url: https://secretmanager.googleapis.com/v1/projects/{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}/secrets/{{ gcp_project_prefix }}-storage-key/versions/latest:access
        method: GET
        remote_src: yes
        return_content: yes
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
          Content-Type: application/json
          x-goog-user-project: "{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}"
      register: storage_key

    - name: Get storage gateway secret from google secret manager
      uri:
        url: https://secretmanager.googleapis.com/v1/projects/{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}/secrets/{{ gcp_project_prefix }}-storagegw-password/versions/latest:access
        method: GET
        remote_src: yes
        return_content: yes
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
          Content-Type: application/json
          x-goog-user-project: "{{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}"
      register: storagegw_secret

    - name: storage secret json (clear)
      file:
        path: "{{ project_directory }}/nextcloud_storagegw/credentials.json"
        state: absent

    - name: storage secret json (set)
      lineinfile:
        path: "{{ project_directory }}/nextcloud_storagegw/credentials.json"
        owner: "{{ storagegw_user.name }}"
        group: "{{ storagegw_user.group }}"
        mode: '0440'
        create: yes
        line: "{{ storage_key.json.payload.data | b64decode | b64decode }}"

    - name: storage secret json (format)
      replace:
        path: "{{ project_directory }}/nextcloud_storagegw/credentials.json"
        regexp: "'"
        replace: '"'

    - name: Get nextcloud backup from storage if exists
      get_url:
        url: https://storage.googleapis.com/{{ gcp_project_prefix }}-bucket-{{ gcp_project_suffix }}/nextcloud/nextcloud_application_backup.tar.gz
        force: yes
        owner: root
        group: root
        mode: '0640'
        timeout: 120
        dest: "{{ project_directory }}/nextcloud_application_backup.tar.gz"
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
      ignore_errors: True

    - name: Determine nextcloud state
      stat:
        path: "{{ project_directory }}/nextcloud_application/var/www/html/data/ncadmin"
      register: nextcloud_state

    - name: unarchive backup if dir not exists
      unarchive:
        src: "{{ project_directory }}/nextcloud_application_backup.tar.gz"
        dest: "{{ project_directory }}/"
        remote_src: yes
      when: nextcloud_state.stat.exists|bool == False
      ignore_errors: True

    - name: Get nextcloud backup db from storage if exists
      get_url:
        url: https://storage.googleapis.com/{{ gcp_project_prefix }}-bucket-{{ gcp_project_suffix }}/nextcloud/nextcloud_database_backup.tar.gz
        force: yes
        owner: root
        group: root
        mode: '0640'
        timeout: 120
        dest: "{{ project_directory }}/nextcloud_database_backup.tar.gz"
        headers:
          Authorization: Bearer {{ gcs_token_resp.json.access_token }}
      ignore_errors: True

    - name: Determine nextcloud db state
      stat:
        path: "{{ project_directory }}/nextcloud_database/databases/nextcloud"
      register: nextcloud_db_state

    - name: unarchive db backup if dir not exists
      unarchive:
        src: "{{ project_directory }}/nextcloud_database_backup.tar.gz"
        dest: "{{ project_directory }}/"
        remote_src: yes
        owner: nextclouddb
        group: nextclouddb
      when: nextcloud_db_state.stat.exists|bool == False
      ignore_errors: True

    - name: docker network
      docker_network:
        name: nextcloud
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network }}/24"
            gateway: "{{ docker_gw }}"

    - name: db container
      docker_container:
        name: nextcloud_database
        hostname: nextclouddb
        image: linuxserver/mariadb:latest
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_db }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ admin_secret.json.payload.data | b64decode }}"
          MYSQL_PASSWORD: "{{ db_secret.json.payload.data | b64decode }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          PUID: "{{ db_user.uid }}"
          PGID: "{{ db_user.group }}"
        volumes:
          - "{{ project_directory }}/nextcloud_database:/config:rw"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"

    - name: nextcloud container
      docker_container:
        name: nextcloud_application
        hostname: nextcloudapp
        image: nextcloud:latest
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_nextcloud }}"
        env:
          NEXTCLOUD_ADMIN_PASSWORD: "{{ admin_secret.json.payload.data | b64decode }}"
          NEXTCLOUD_ADMIN_USER: ncadmin
          NEXTCLOUD_TRUSTED_DOMAINS: "{{ instance_public_ip }} {{ docker_webproxy }} {{ docker_nextcloud }}"
          TRUSTED_PROXIES: "{{ instance_public_ip }} {{ docker_webproxy }}"
          OVERWRITEHOST: "{{ instance_public_ip }}:{{ web_port }}"
          OVERWRITEPROTOCOL: https
          MYSQL_PASSWORD: "{{ db_secret.json.payload.data | b64decode }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          MYSQL_HOST: "{{ docker_db }}"
        volumes:
          - "{{ project_directory }}/nextcloud_application/var/www/html:/var/www/html:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/custom_apps:/var/www/html/custom_apps:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/config:/var/www/html/config:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/data:/var/www/html/data:rw"
          - "{{ project_directory }}/nextcloud_application/var/www/html/themes:/var/www/html/themes:rw"
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"

    - name: web proxy container
      docker_container:
        name: nextcloud_webproxy
        hostname: nextcloudweb
        image: httpd:2.4
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_webproxy }}"
        ports:
          - "{{ web_port }}:{{ web_port }}"
        volumes:
          - "{{ project_directory }}/nextcloud_webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro"
          - "{{ project_directory }}/nextcloud_webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro"
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        pull: yes
        purge_networks: yes
        restart_policy: "always"
        container_default_behavior: "compatibility"

    - name: storage gateway container
      docker_container:
        name: nextcloud_storagegw
        image: minio/minio:latest
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_storagegw }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "/credentials.json"
          MINIO_ACCESS_KEY: "storagegw"
          MINIO_SECRET_KEY: "{{ storagegw_secret.json.payload.data | b64decode }}"
        command: "gateway gcs {{ gcp_project_prefix }}-project-{{ gcp_project_suffix }}"
        user: "{{ storagegw_user.uid }}:{{ storagegw_user.group }}"
        volumes:
          - "{{ project_directory }}/nextcloud_storagegw/credentials.json:/credentials.json:ro"
        pull: yes
        purge_networks: yes
        restart_policy: always
        container_default_behavior: "compatibility"

    - name: nextcloud storage (clear)
      file:
        path: "{{ project_directory }}/nextcloud-storage.sh"
        state: absent

    - name: nextcloud storage (set)
      lineinfile:
        path: "{{ project_directory }}/nextcloud-storage.sh"
        create: yes
        owner: root
        group: root
        mode: '0500'
        line: "{{ item }}"
      with_items:
        - "#!/bin/bash"
        - "# ensure files_external is enabled"
        - "docker exec --user www-data nextcloud_application php occ app:enable files_external"
        - " "
        - "# check bucket against existing storage"
        - "docker exec --user www-data nextcloud_application php occ files_external:list | grep --quiet 'cloud-storage'"
        - "  "
        - "# if doesn't exist, create"
        - "if [ $? -ne 0 ]"
        - "then"
        - "  echo 'Creating cloud storage in Nextcloud'"
        - "  docker exec --user www-data nextcloud_application php occ files_external:create -c bucket={{ gcp_project_prefix }}-bucket-data-{{ gcp_project_suffix }} -c hostname={{ docker_storagegw }} -c port=9000 -c use_ssl=false -c use_path_style=true -c key=storagegw -c secret={{ storagegw_secret.json.payload.data | b64decode }} cloud-storage amazons3 amazons3::accesskey"
        - "  STORAGE_ID=$(docker exec --user www-data nextcloud_application php occ files_external:list | awk '/cloud-storage/ {a=$2}END{print a}')"
        - "  docker exec --user www-data nextcloud_application php occ files_external:option $STORAGE_ID enable_sharing true"
        - "else"
        - "  echo 'cloud storage exists, skipping.'"
        - "fi"

    - name: wait for nextcloud 200OK
      uri:
        url: "https://127.0.0.1:{{ web_port }}/login"
        status_code: 200
        validate_certs: no
      register: nc_wait_result
      until: nc_wait_result.status == 200
      retries: 180
      delay: 1

    - name: nextcloud storage (execute)
      shell:
        cmd: "{{ project_directory }}/nextcloud-storage.sh"
      args:
        executable: /bin/bash

    - name: nextcloud backup playbook (clear)
      file:
        path: "{{ project_directory }}/nextcloud-backup.yml"
        state: absent

    - name: nextcloud backup playbook (set)
      lineinfile:
        path: "{{ project_directory }}/nextcloud-backup.yml"
        create: yes
        owner: root
        group: root
        mode: '0640'
        line: "{{ item }}"
      with_items:
        - "---"
        - "- name: nextcloud-backup.yml"
        - "  hosts: localhost"
        - "  gather_facts: false"
        - "  collections:"
        - "    - oracle.oci"
        - "  tasks:"
        - "  "
        - "    - name: archive nextcloud locally"
        - "      archive:"
        - "        path: \"{{ project_directory }}/{{ '{{ item }}' }}\""
        - "        dest: \"{{ project_directory }}/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        format: gz"
        - "        owner: root"
        - "        group: root"
        - "        mode: '0640'"
        - "      with_items:"
        - "        - nextcloud_application"
        - "        - nextcloud_database"
        - "   "
        - "    - name: Retrieve GCS Token"
        - "      uri:"
        - "        url: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token"
        - "        method: GET"
        - "        headers:"
        - "          Metadata-Flavor: Google"
        - "        return_content: yes"
        - "      register: gcs_token_resp"
        - "     "
        - "    - name: upload nextcloud archive to storage"
        - "      uri: "
        - "        url: \"https://storage.googleapis.com/upload/storage/v1/b/{{ gcp_project_prefix }}-bucket-{{ gcp_project_suffix }}/o?uploadType=media&name=nextcloud/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        timeout: 720"
        - "        method: POST"
        - "        src: \"{{ project_directory }}/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        remote_src: yes"
        - "        return_content: yes "
        - "        headers: "
        - "          Authorization: \"Bearer {{ '{{ gcs_token_resp.json.access_token }}' }}\""
        - "          Content-Type: application/gzip"
        - "      with_items: "
        - "        - nextcloud_application "
        - "        - nextcloud_database "

    - name: nextcloud backup systemd timer
      blockinfile:
        path: /etc/systemd/system/nextcloud-backup.timer
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies nextcloud_application and nextcloud_database containers to cloud storage
          [Timer]
          OnUnitActiveSec=12h
          Unit=nextcloud-backup.service
          [Install]
          WantedBy=multi-user.target

    - name: nextcloud backup systemd service
      blockinfile:
        path: /etc/systemd/system/nextcloud-backup.service
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies nextcloud_application and nextcloud_database containers to cloud storage
          After=network.target
          [Service]
          ExecStart=/usr/local/bin/ansible-playbook {{ project_directory }}/nextcloud-backup.yml
          Type=simple
          Restart=no
          [Install]
          WantedBy=multi-user.target

    - name: nextcloud backup systemd start/enable
      systemd:
        name: "nextcloud-backup.{{ item }}"
        daemon_reload: yes
        state: started
        enabled: yes
      with_items:
        - service
        - timer
