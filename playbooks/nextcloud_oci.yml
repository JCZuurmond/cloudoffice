---
- name: nextcloud
  hosts: localhost
  connection: local
  collections:
    - oracle.oci
  gather_facts: true
  become: true
  become_user: root
  tasks:

    - name: required packages
      apt:
        pkg:
          - docker.io
          - libcap2-bin
          - python3-pip
          - ssl-cert
        state: latest
        update_cache: yes

    - name: docker python packages
      pip:
        name:
          - docker
        executable: /usr/bin/pip3
        state: latest

    - name: IP Forwarding enable/persist
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.conf

    - name: docker service started/enabled
      systemd:
        name: docker
        state: started
        enabled: True

    - name: db user
      user:
        name: nextclouddb
        shell: /bin/bash
        create_home: False
      register: db_user

    - name: get oci metadata
      uri:
        url: http://169.254.169.254/opc/v2/vnics/
        headers:
          Authorization: "Bearer Oracle"
      register: oci_vnic_metadata

    - name: get oci private ip facts
      oci_network_private_ip_facts:
        auth_type: "instance_principal"
        vnic_id: "{{ oci_vnic_metadata.json[0].vnicId }}"
        tenancy: "{{ oci_root_compartment }}"
      register: private_ip_data

    - name: get oci public ip facts
      oci_network_public_ip_facts:
        auth_type: "instance_principal"
        private_ip_id: "{{ private_ip_data.private_ips[0].id }}"
      register: public_ip_data

    - name: set public ip fact for webproxy
      set_fact:
        instance_public_ip: "{{ public_ip_data.public_ips[0].ip_address }}"

    - name: various container directories - application
      file:
        path: "{{ item }}"
        state: directory
        owner: www-data
        mode: '0750'
      with_items:
        - /opt/nextcloud
        - /opt/nextcloud/var
        - /opt/nextcloud/var/www
        - /opt/nextcloud/var/www/html
        - /opt/nextcloud/var/www/html/custom_apps
        - /opt/nextcloud/var/www/html/config
        - /opt/nextcloud/var/www/html/data

    - name: various container directories - webproxy
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0750'
      with_items:
        - /opt/webproxy

    - name: various container directories - db
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ db_user.name }}"
        group: "{{ db_user.group }}"
        mode: '0750'
      with_items:
        - /opt/nextcloud_db

    - name: secure web proxy
      template:
        src: "{{ item }}"
        dest: "/opt/webproxy/{{ item }}"
        owner: root
        group: root
        mode: 0444
      with_items:
        - httpd-ssl.conf
        - httpd.conf

    - name: fetch decrypt admin pass
      oci_key_management_decrypted_data:
        auth_type: "instance_principal"
        ciphertext: "{{ admin_password_cipher }}"
        service_endpoint: "{{ oci_kms_endpoint }}"
        key_id: "{{ oci_kms_keyid }}"
      register: admin_password_decrypt

    - name: fetch decrypt db pass
      oci_key_management_decrypted_data:
        auth_type: "instance_principal"
        ciphertext: "{{ db_password_cipher }}"
        service_endpoint: "{{ oci_kms_endpoint }}"
        key_id: "{{ oci_kms_keyid }}"
      register: db_password_decrypt

    - name: fetch decrypt bucket user key
      oci_key_management_decrypted_data:
        auth_type: "instance_principal"
        ciphertext: "{{ bucket_user_key_cipher }}"
        service_endpoint: "{{ oci_kms_endpoint }}"
        key_id: "{{ oci_kms_keyid }}"
      register: bucket_user_key_decrypt

    - name: get backup from storage if exists
      oci_object_storage_object:
        auth_type: "instance_principal"
        namespace_name: "{{ oci_storage_namespace }}"
        bucket_name: "{{ oci_storage_bucketname }}"
        object_name: "nextcloud/nextcloud_backup.tar.gz"
        dest: "/opt/nextcloud_backup.tar.gz"
      ignore_errors: True

    - name: Determine nextcloud state
      stat:
        path: /opt/nextcloud/var/www/html/data/ncadmin
      register: nextcloud_state

    - name: unarchive backup if dir not exists
      unarchive:
        src: /opt/nextcloud_backup.tar.gz
        dest: /opt/
        remote_src: yes
      when: nextcloud_state.stat.exists|bool == False
      ignore_errors: True

    - name: get db backup from storage if exists
      oci_object_storage_object:
        auth_type: "instance_principal"
        namespace_name: "{{ oci_storage_namespace }}"
        bucket_name: "{{ oci_storage_bucketname }}"
        object_name: "nextcloud/nextcloud_db_backup.tar.gz"
        dest: "/opt/nextcloud_db_backup.tar.gz"
      ignore_errors: True

    - name: Determine nextcloud db state
      stat:
        path: /opt/nextcloud_db/databases/nextcloud
      register: nextcloud_db_state

    - name: unarchive db backup if dir not exists
      unarchive:
        src: /opt/nextcloud_db_backup.tar.gz
        dest: /opt/
        remote_src: yes
        owner: nextclouddb
        group: nextclouddb
      when: nextcloud_db_state.stat.exists|bool == False
      ignore_errors: True

    - name: docker network
      docker_network:
        name: nextcloud
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network }}/24"
            gateway: "{{ docker_gw }}"

    - name: db container
      docker_container:
        name: nextcloud_database
        hostname: nextclouddb
        image: linuxserver/mariadb:latest
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_db }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ admin_password_decrypt.decrypted_data.plaintext | b64decode }}"
          MYSQL_PASSWORD: "{{ db_password_decrypt.decrypted_data.plaintext | b64decode }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          PUID: "{{ db_user.uid }}"
          PGID: "{{ db_user.group }}"
        volumes:
          - /opt/nextcloud_db:/config:rw
        pull: yes
        purge_networks: yes
        restart_policy: "always"

    - name: nextcloud container
      docker_container:
        name: nextcloud_application
        hostname: nextcloudapp
        image: nextcloud:latest
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_nextcloud }}"
        env:
          NEXTCLOUD_ADMIN_PASSWORD: "{{ admin_password_decrypt.decrypted_data.plaintext | b64decode }}"
          NEXTCLOUD_ADMIN_USER: ncadmin
          NEXTCLOUD_TRUSTED_DOMAINS: "{{ instance_public_ip }} {{ docker_webproxy }} {{ docker_nextcloud }}"
          TRUSTED_PROXIES: "{{ instance_public_ip }} {{ docker_webproxy }}"
          OVERWRITEHOST: "{{ instance_public_ip }}"
          OVERWRITEPROTOCOL: https
          MYSQL_PASSWORD: "{{ db_password_decrypt.decrypted_data.plaintext | b64decode }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_USER: nextcloud
          MYSQL_HOST: "{{ docker_db }}"
        volumes:
          - /opt/nextcloud/var/www/html:/var/www/html:rw
          - /opt/nextcloud/var/www/html/custom_apps:/var/www/html/custom_apps:rw
          - /opt/nextcloud/var/www/html/config:/var/www/html/config:rw
          - /opt/nextcloud/var/www/html/data:/var/www/html/data:rw
          - /opt/nextcloud/var/www/html/themes:/var/www/html/themes:rw
        pull: yes
        purge_networks: yes
        restart_policy: "always"

    - name: web proxy container
      docker_container:
        name: nextcloud_web_proxy
        hostname: nextcloudweb
        image: httpd:2.4
        networks:
          - name: nextcloud
            ipv4_address: "{{ docker_webproxy }}"
        ports:
          - "443:443"
        volumes:
          - /opt/webproxy/httpd-ssl.conf:/usr/local/apache2/conf/extra/httpd-ssl.conf:ro
          - /opt/webproxy/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
          - /etc/ssl/certs/ssl-cert-snakeoil.pem:/usr/local/apache2/conf/server.crt:ro
          - /etc/ssl/private/ssl-cert-snakeoil.key:/usr/local/apache2/conf/server.key:ro
        pull: yes
        purge_networks: yes
        restart_policy: "always"

    - name: iptables accept HTTPS
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: '443'
        ctstate: 'NEW'
        jump: ACCEPT
        action: insert
        rule_num: '2'

    - name: iptables Persistent
      shell: |
        iptables-save

    - name: nextcloud s3 storage (clear)
      file:
        path: /opt/nextcloud-s3-storage.sh
        state: absent

    - name: nextcloud s3 storage (set)
      lineinfile:
        path: /opt/nextcloud-s3-storage.sh
        create: yes
        owner: root
        group: root
        mode: '0500'
        line: "{{ item }}"
      with_items:
        - "#!/bin/bash"
        - "# ensure files_external is enabled"
        - "docker exec --user www-data nextcloud_application php occ app:enable files_external"
        - " "
        - "# check bucket against existing storage"
        - "docker exec --user www-data nextcloud_application php occ files_external:list | grep --quiet 'cloud-storage'"
        - "  "
        - "# if doesn't exist, create"
        - "if [ $? -ne 0 ]"
        - "then"
        - "  echo 'Creating S3 storage in Nextcloud'"
        - "  docker exec --user www-data nextcloud_application php occ files_external:create -c bucket={{ oci_storage_bucketname }}-data -c hostname={{ oci_storage_namespace }}.compat.objectstorage.{{ oci_region }}.oraclecloud.com -c port=443 -c region={{ oci_region }} -c use_ssl=true -c use_path_style=true -c key={{ bucket_user_id }} -c secret={{ bucket_user_key_decrypt.decrypted_data.plaintext | b64decode }} cloud-storage amazons3 amazons3::accesskey"
        - "  STORAGE_ID=$(docker exec --user www-data nextcloud_application php occ files_external:list | awk '/cloud-storage \|/ {a=$2}END{print a}')"
        - "  docker exec --user www-data nextcloud_application php occ files_external:option $STORAGE_ID enable_sharing true"
        - "else"
        - "  echo 'S3 storage exists, skipping.'"
        - "fi"

    - name: wait for nextcloud 200OK
      uri:
        url: "https://127.0.0.1:443/"
        status_code: 200
        validate_certs: no
      register: nc_wait_result
      until: nc_wait_result.status == 200
      retries: 180
      delay: 1

    - name: nextcloud s3 storage (execute)
      shell:
        cmd: /opt/nextcloud-s3-storage.sh
      args:
        executable: /bin/bash

    - name: nextcloud to cloud storage playbook (clear)
      file:
        path: /opt/nextcloud-to-backup.yml
        state: absent

    - name: nextcloud to cloud storage playbook (set)
      lineinfile:
        path: /opt/nextcloud-to-cloudstorage.yml
        create: yes
        owner: root
        group: root
        mode: '0640'
        line: "{{ item }}"
      with_items:
        - "---"
        - "- name: nextcloud-to-cloudstorage.yml"
        - "  hosts: localhost"
        - "  gather_facts: false"
        - "  collections:"
        - "    - oracle.oci"
        - "  tasks:"
        - "  "
        - "    - name: archive nextcloud locally"
        - "      archive:"
        - "        path: \"/opt/{{ '{{ item }}' }}\""
        - "        dest: \"/opt/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        format: gz"
        - "        owner: root"
        - "        group: root"
        - "        mode: '0640'"
        - "      with_items:"
        - "        - nextcloud"
        - "        - nextcloud_db"
        - "   "
        - "    - name: upload nextcloud archive to storage"
        - "      oci_object_storage_object:"
        - "        auth_type: \"instance_principal\""
        - "        namespace_name: \"{{ oci_storage_namespace }}\""
        - "        bucket_name: \"{{ oci_storage_bucketname }}\""
        - "        object_name: \"nextcloud/{{ '{{ item }}' }}_backup.tar.gz\""
        - "        src: \"/opt/{{ '{{ item }}' }}_backup.tar.gz\""
        - "      with_items: "
        - "        - nextcloud "
        - "        - nextcloud_db "

    - name: nextcloud to cloud storage timer
      blockinfile:
        path: /etc/systemd/system/nextcloud-to-cloudstorage.timer
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies to cloud storage
          [Timer]
          OnUnitActiveSec=12h
          Unit=nextcloud-to-cloudstorage.service
          [Install]
          WantedBy=multi-user.target

    - name: nextcloud to cloud storage service
      blockinfile:
        path: /etc/systemd/system/nextcloud-to-cloudstorage.service
        create: yes
        owner: root
        group: root
        mode: '0644'
        block: |
          [Unit]
          Description=Archives and copies to cloud storage
          After=network.target
          [Service]
          ExecStart=/usr/local/bin/ansible-playbook /opt/nextcloud-to-cloudstorage.yml
          Type=simple
          Restart=no
          [Install]
          WantedBy=multi-user.target

    - name: nextcloud to cloud storage start/enable
      systemd:
        name: "nextcloud-to-cloudstorage.{{ item }}"
        daemon_reload: yes
        state: started
        enabled: yes
      with_items:
        - service
        - timer
